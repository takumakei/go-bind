// gen-bind command generates bind functions.
package main

import (
	"flag"
	"os"
	"strconv"
	"strings"
	"text/template"
)

var (
	FlagPackage = "bind"
	FlagParams  = 9
	FlagReturns = 9
)

func main() {
	flag.StringVar(&FlagPackage, "pkg", FlagPackage, "package name")
	flag.IntVar(&FlagParams, "p", FlagParams, "`max`imum number of parameters")
	flag.IntVar(&FlagReturns, "r", FlagReturns, "`max`imum number of return values")
	flag.Parse()

	if err := tmpl.ExecuteTemplate(os.Stdout, tmplHeader, makeData(FlagParams, FlagReturns)); err != nil {
		panic(err)
	}

	for p := 1; p <= FlagParams; p++ {
		for r := 1; r <= FlagReturns; r++ {
			if err := tmpl.ExecuteTemplate(os.Stdout, tmplBind, makeData(p, r)); err != nil {
				panic(err)
			}
		}
	}
}

func makeData(p, r int) map[string]any {
	return map[string]any{
		"Pkg": FlagPackage,

		"P": &TypeList{
			N: p,
			t: "P",
		},

		"R": &TypeList{
			N: r,
			t: "R",
		},
	}
}

var tmpl *template.Template

const (
	tmplHeader = "header"
	tmplBind   = "bind"
)

func init() {
	tmpl = template.Must(template.New(tmplHeader).Parse(
		`// Package {{.Pkg}} provides functions that bind arguments to a function.
//
// Code generated by gen-bind. DO NOT EDIT.
package {{.Pkg}}
`,
	))

	tmpl = template.Must(tmpl.New(tmplBind).Parse(
		`
// P{{.P.N}}R{{.R.N}} returns the no argument function that calls fn with {{if eq .P.N 1}}the specified argument{{else}}the {{.P.N}} specified arguments{{end}} and returns {{if eq .R.N 1}}one value{{else}}{{.R.N}} values{{end}}.
func P{{.P.N}}R{{.R.N}}[{{.P.Types}}, {{.R.Types}} any](fn func({{.P.Params}}) {{.R.TypesP}}, {{.P.Params}}) func() {{.R.TypesP}} {
	return func() {{.R.TypesP}} { return fn({{.P.Vars}}) }
}
`,
	))
}

type TypeList struct {
	N int
	t string // "P" or "R"
}

func (tl *TypeList) Types() string {
	a := make([]string, 0, tl.N)
	for i := 1; i <= tl.N; i++ {
		a = append(a, tl.t+strconv.Itoa(i))
	}
	return strings.Join(a, ", ")
}

func (tl *TypeList) TypesP() string {
	if tl.N == 1 {
		return tl.Types()
	}
	return "(" + tl.Types() + ")"
}

func (tl *TypeList) Params() string {
	v := strings.ToLower(tl.t)
	a := make([]string, 0, tl.N)
	for i := 1; i <= tl.N; i++ {
		n := strconv.Itoa(i)
		a = append(a, v+n+" "+tl.t+n)
	}
	return strings.Join(a, ", ")
}

func (tl *TypeList) Vars() string {
	v := strings.ToLower(tl.t)
	a := make([]string, 0, tl.N)
	for i := 1; i <= tl.N; i++ {
		a = append(a, v+strconv.Itoa(i))
	}
	return strings.Join(a, ", ")
}
